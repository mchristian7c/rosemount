/******************************************************************
Site Name:
Author:

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

$white: #ffffff;

$alfa: 'Roboto Condensed', sans-serif;
$beta: 'Source Sans Pro', sans-serif;



$lig: 100;
$med: 300;
$reg: 400;
$sem: 600;
$bol: 700;

$nav: #878789;
$navbg: #f7f5f3;
$gold: #c5baac;
$darkro: #6C6C6D;
$red: rgba(0,207,181,1);
$darkred: #00a590;
// #C01A2D;

$dark: rgba(73, 251, 53, 1);
$light: rgba(73, 251, 53, 1);
$hover: rgba(73, 251, 53, 1);

@mixin scale($size) {
  -webkit-transform: scale($size);
      -ms-transform: scale($size);
          transform: scale($size);
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow:    $shadow;
  box-shadow:         $shadow;
}


@mixin word-wrap() {
  word-break:     keep-all;
  -webkit-hyphens: none;
  -moz-hyphens:    none;
  hyphens:         none;
}

@mixin opacity($value){
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}

@mixin transition($ms) {
  -webkit-transition: all $ms ease-in;
  -ms-transition: all $ms ease-in;
  -moz-transition: all $ms ease-in;
  transition: all $ms ease-in;
}

@mixin bezier(){
  -webkit-transition: all 0.6s cubic-bezier(0.88,-0.99, 0, 1.81);
  transition: all 0.6s cubic-bezier(0.88,-0.99, 0, 1.81);
}

@mixin selectxt() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}



@mixin rotate($turn) {
  -webkit-transform: rotate($turn);
  -ms-transform: rotate($turn);
  -moz-transform: rotate($turn);
  transform: rotate($turn);
}

@mixin flip() {
  -moz-transform: scaleX(-1);
  -o-transform: scaleX(-1);
  -webkit-transform: scaleX(-1);
  transform: scaleX(-1);
  filter: FlipH;
  -ms-filter: "FlipH";
}
@mixin animate($sec) {
  -moz-animation-delay: $sec;
  -webkit-animation-delay: $sec;
  -o-animation-delay: $sec;
  -ms-animation-delay: $sec;
}
